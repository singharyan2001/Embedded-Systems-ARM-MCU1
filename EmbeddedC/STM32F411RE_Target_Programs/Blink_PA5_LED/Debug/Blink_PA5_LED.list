
Blink_PA5_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000148  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e0  080002e8  000102e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e0  080002e0  000102e8  2**0
                  CONTENTS
  4 .ARM          00000000  080002e0  080002e0  000102e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e0  080002e8  000102e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e0  080002e0  000102e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002e4  080002e4  000102e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002e8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000105  00000000  00000000  0001035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000085  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000104e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002c  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f64  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000049d  00000000  00000000  000114c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c0d  00000000  00000000  0001195d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000058  00000000  00000000  0001556c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000155c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080002c8 	.word	0x080002c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080002c8 	.word	0x080002c8

080001d8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
	//Address of Clock control Register RCCAHB1ENR for GPIO A Peripherals
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;
 80001de:	4b10      	ldr	r3, [pc, #64]	; (8000220 <main+0x48>)
 80001e0:	60fb      	str	r3, [r7, #12]
	//Address of GPIOA Mode Register
	uint32_t *pPortDModeReg = (uint32_t*)0x40020000;
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <main+0x4c>)
 80001e4:	60bb      	str	r3, [r7, #8]
	//Address of GPIOA Output Data Register
	uint32_t *ppPortDOutReg = (uint32_t*)0x40020014;
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <main+0x50>)
 80001e8:	607b      	str	r3, [r7, #4]

	/*
	 * Enable the clock for GPIOA Peripheral in the AHB i.e bit 0
	*/
	// Method 1
	uint32_t temp = *pClkCtrlReg; //Read operation
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	603b      	str	r3, [r7, #0]
	temp = temp | 0x01; //Modify
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	603b      	str	r3, [r7, #0]
	*pClkCtrlReg = temp; //Write back
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	683a      	ldr	r2, [r7, #0]
 80001fc:	601a      	str	r2, [r3, #0]
	 * Create a mask value where except Moder5 all are 1 i.e 0xFFFFF3FF (only Moder5 is 0 i.e bit 11,10]
	 * Mask for setting a value in Moder5 i.e 0x00000800 -> 11,10,9,8 -> 0,1,0,0 i.e 8
	 *
	 * 2. Clear Moder5 bit positions and set Moder5 bit positions i.e 11,10 -> 0,1 ; for GP output mode selection
	*/
	*pPortDModeReg &= 0xFFFFF3FF; //Clear Moder5
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	601a      	str	r2, [r3, #0]
	*pPortDModeReg |= 0x00000800; //Set Moder5
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	601a      	str	r2, [r3, #0]
	/*
	 * 3. Set the 5th bit (PA5) of the output data register to make I/O pin-5 as HIGH.
	 * Set values using OR operation Clear values by AND operations.
	 * Set mask for PA5 -> 0x0020 [15:0]
	*/
	*ppPortDOutReg |= 0x0000;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]

	while (1);
 800021e:	e7fe      	b.n	800021e <main+0x46>
 8000220:	40023830 	.word	0x40023830
 8000224:	40020000 	.word	0x40020000
 8000228:	40020014 	.word	0x40020014

0800022c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000230:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490d      	ldr	r1, [pc, #52]	; (800026c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0a      	ldr	r4, [pc, #40]	; (8000278 <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025a:	f000 f811 	bl	8000280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f7ff ffbb 	bl	80001d8 <main>

08000262 <LoopForever>:

LoopForever:
  b LoopForever
 8000262:	e7fe      	b.n	8000262 <LoopForever>
  ldr   r0, =_estack
 8000264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800026c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000270:	080002e8 	.word	0x080002e8
  ldr r2, =_sbss
 8000274:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000278:	2000001c 	.word	0x2000001c

0800027c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800027c:	e7fe      	b.n	800027c <ADC_IRQHandler>
	...

08000280 <__libc_init_array>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	4d0d      	ldr	r5, [pc, #52]	; (80002b8 <__libc_init_array+0x38>)
 8000284:	4c0d      	ldr	r4, [pc, #52]	; (80002bc <__libc_init_array+0x3c>)
 8000286:	1b64      	subs	r4, r4, r5
 8000288:	10a4      	asrs	r4, r4, #2
 800028a:	2600      	movs	r6, #0
 800028c:	42a6      	cmp	r6, r4
 800028e:	d109      	bne.n	80002a4 <__libc_init_array+0x24>
 8000290:	4d0b      	ldr	r5, [pc, #44]	; (80002c0 <__libc_init_array+0x40>)
 8000292:	4c0c      	ldr	r4, [pc, #48]	; (80002c4 <__libc_init_array+0x44>)
 8000294:	f000 f818 	bl	80002c8 <_init>
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	10a4      	asrs	r4, r4, #2
 800029c:	2600      	movs	r6, #0
 800029e:	42a6      	cmp	r6, r4
 80002a0:	d105      	bne.n	80002ae <__libc_init_array+0x2e>
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a8:	4798      	blx	r3
 80002aa:	3601      	adds	r6, #1
 80002ac:	e7ee      	b.n	800028c <__libc_init_array+0xc>
 80002ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b2:	4798      	blx	r3
 80002b4:	3601      	adds	r6, #1
 80002b6:	e7f2      	b.n	800029e <__libc_init_array+0x1e>
 80002b8:	080002e0 	.word	0x080002e0
 80002bc:	080002e0 	.word	0x080002e0
 80002c0:	080002e0 	.word	0x080002e0
 80002c4:	080002e4 	.word	0x080002e4

080002c8 <_init>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	bf00      	nop
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr

080002d4 <_fini>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr
