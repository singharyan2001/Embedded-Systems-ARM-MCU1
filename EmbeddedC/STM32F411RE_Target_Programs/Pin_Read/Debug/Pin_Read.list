
Pin_Read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000158  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f0  080002f8  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f0  080002f0  000102f8  2**0
                  CONTENTS
  4 .ARM          00000000  080002f0  080002f0  000102f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f0  080002f8  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f4  080002f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002f8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000131  00000000  00000000  0001036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000a7  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002c  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f64  00000000  00000000  000105bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004e3  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c20  00000000  00000000  00011a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000050  00000000  00000000  00015624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00015674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080002d8 	.word	0x080002d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080002d8 	.word	0x080002d8

080001d8 <main>:

	/*
	 * Enable the clock for GPIOA & C Peripheral in the AHB i.e bit 0
	*/
	//*pClkCtrlReg |= 0x05;
	*pClkCtrlReg |= (1<<2) | (1<<0);
 80001d8:	4916      	ldr	r1, [pc, #88]	; (8000234 <main+0x5c>)

	//Port A; PA5
	*pPortAModeReg &= ~(3<<10);//~(1<<10) | ~(1<<11);
 80001da:	4a17      	ldr	r2, [pc, #92]	; (8000238 <main+0x60>)
	*pClkCtrlReg |= (1<<2) | (1<<0);
 80001dc:	f8d1 3830 	ldr.w	r3, [r1, #2096]	; 0x830
 80001e0:	f043 0305 	orr.w	r3, r3, #5
 80001e4:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830
	*pPortAModeReg &= ~(3<<10);//~(1<<10) | ~(1<<11);
 80001e8:	6813      	ldr	r3, [r2, #0]
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
	*pPortAModeReg |= (1<<10);
 80001f0:	6813      	ldr	r3, [r2, #0]
 80001f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f6:	6013      	str	r3, [r2, #0]

	//Configure PC13 as Input mode
	//Port C, PC13
	*pPortCModeReg &= (3<<26);
 80001f8:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80001fc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8000200:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	*pPortCModeReg |= ~(3<<26);
 8000204:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8000208:	f063 6340 	orn	r3, r3, #201326592	; 0xc000000
{
 800020c:	b082      	sub	sp, #8
	*pPortCModeReg |= ~(3<<26);
 800020e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
//		}
//	}
//Method 2
	while (1){
		//Read the GPIO C Input Data Register
		volatile uint32_t temp = ((*pPortCInReg >> 13));
 8000212:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 8000216:	0b5b      	lsrs	r3, r3, #13
 8000218:	9301      	str	r3, [sp, #4]
		if(temp == 0){
 800021a:	9b01      	ldr	r3, [sp, #4]
 800021c:	b923      	cbnz	r3, 8000228 <main+0x50>
			*pPortAOutReg |= (1<<5);//LED On;
 800021e:	6953      	ldr	r3, [r2, #20]
 8000220:	f043 0320 	orr.w	r3, r3, #32
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	e7f4      	b.n	8000212 <main+0x3a>
		}
		else{
			*pPortAOutReg &= ~(1<<5);//LED Off;
 8000228:	6953      	ldr	r3, [r2, #20]
 800022a:	f023 0320 	bic.w	r3, r3, #32
 800022e:	6153      	str	r3, [r2, #20]
 8000230:	e7ef      	b.n	8000212 <main+0x3a>
 8000232:	bf00      	nop
 8000234:	40023000 	.word	0x40023000
 8000238:	40020000 	.word	0x40020000

0800023c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <LoopForever+0x6>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	; (800027c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <LoopForever+0xe>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	; (8000288 <LoopForever+0x16>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026a:	f000 f811 	bl	8000290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026e:	f7ff ffb3 	bl	80001d8 <main>

08000272 <LoopForever>:

LoopForever:
  b LoopForever
 8000272:	e7fe      	b.n	8000272 <LoopForever>
  ldr   r0, =_estack
 8000274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000280:	080002f8 	.word	0x080002f8
  ldr r2, =_sbss
 8000284:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000288:	2000001c 	.word	0x2000001c

0800028c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC_IRQHandler>
	...

08000290 <__libc_init_array>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	4d0d      	ldr	r5, [pc, #52]	; (80002c8 <__libc_init_array+0x38>)
 8000294:	4c0d      	ldr	r4, [pc, #52]	; (80002cc <__libc_init_array+0x3c>)
 8000296:	1b64      	subs	r4, r4, r5
 8000298:	10a4      	asrs	r4, r4, #2
 800029a:	2600      	movs	r6, #0
 800029c:	42a6      	cmp	r6, r4
 800029e:	d109      	bne.n	80002b4 <__libc_init_array+0x24>
 80002a0:	4d0b      	ldr	r5, [pc, #44]	; (80002d0 <__libc_init_array+0x40>)
 80002a2:	4c0c      	ldr	r4, [pc, #48]	; (80002d4 <__libc_init_array+0x44>)
 80002a4:	f000 f818 	bl	80002d8 <_init>
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	10a4      	asrs	r4, r4, #2
 80002ac:	2600      	movs	r6, #0
 80002ae:	42a6      	cmp	r6, r4
 80002b0:	d105      	bne.n	80002be <__libc_init_array+0x2e>
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b8:	4798      	blx	r3
 80002ba:	3601      	adds	r6, #1
 80002bc:	e7ee      	b.n	800029c <__libc_init_array+0xc>
 80002be:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c2:	4798      	blx	r3
 80002c4:	3601      	adds	r6, #1
 80002c6:	e7f2      	b.n	80002ae <__libc_init_array+0x1e>
 80002c8:	080002f0 	.word	0x080002f0
 80002cc:	080002f0 	.word	0x080002f0
 80002d0:	080002f0 	.word	0x080002f0
 80002d4:	080002f4 	.word	0x080002f4

080002d8 <_init>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr

080002e4 <_fini>:
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	bf00      	nop
 80002e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ea:	bc08      	pop	{r3}
 80002ec:	469e      	mov	lr, r3
 80002ee:	4770      	bx	lr
