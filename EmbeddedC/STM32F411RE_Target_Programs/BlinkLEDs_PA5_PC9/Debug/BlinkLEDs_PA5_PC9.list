
BlinkLEDs_PA5_PC9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000374  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000374  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000155  00000000  00000000  000103e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ad  00000000  00000000  0001053c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000105f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00010638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f64  00000000  00000000  00010665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004d8  00000000  00000000  000115c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c28  00000000  00000000  00011aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000058  00000000  00000000  000156cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00015724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000354 	.word	0x08000354

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000354 	.word	0x08000354

080001d8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b089      	sub	sp, #36	; 0x24
 80001dc:	af00      	add	r7, sp, #0
	//Address of Clock control Register RCCAHB1ENR
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;
 80001de:	4b31      	ldr	r3, [pc, #196]	; (80002a4 <main+0xcc>)
 80001e0:	613b      	str	r3, [r7, #16]
	//Address of GPIO Mode Register
	uint32_t *pPortAModeReg = (uint32_t*)0x40020000;
 80001e2:	4b31      	ldr	r3, [pc, #196]	; (80002a8 <main+0xd0>)
 80001e4:	60fb      	str	r3, [r7, #12]
	//Address of GPIOC Mode Register
	uint32_t *pPortCModeReg = (uint32_t*)0x40020800;
 80001e6:	4b31      	ldr	r3, [pc, #196]	; (80002ac <main+0xd4>)
 80001e8:	60bb      	str	r3, [r7, #8]
	//Address of GPIOA Output Data Register
	uint32_t *ppPortAOutReg = (uint32_t*)0x40020014;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <main+0xd8>)
 80001ec:	607b      	str	r3, [r7, #4]
	//Address of GPIOC Output Data Register
	uint32_t *ppPortCOutReg = (uint32_t*)0x40020814;
 80001ee:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <main+0xdc>)
 80001f0:	603b      	str	r3, [r7, #0]

	/*
	 * Enable the clock for GPIOA Peripheral in the AHB i.e bit 0
	*/
	//*pClkCtrlReg |= 0x05;
	*pClkCtrlReg |= (1<<2) | (1<<0);
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0205 	orr.w	r2, r3, #5
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	601a      	str	r2, [r3, #0]
	 * 2. Clear Moder5 bit positions and set Moder5 bit positions i.e 11,10 -> 0,1 ; for GP output mode selection
	*/
	//Port A; PA5
//	*pPortAModeReg &= 0xFFFFF3FF; //Clear Moder5
//	*pPortAModeReg |= 0x00000800; //Set Moder5
	*pPortAModeReg &= ~(3<<10); //~(1<<10) | ~(1<<11);
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	601a      	str	r2, [r3, #0]
	*pPortAModeReg |= (1<<10);
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]

	//Port C, PC9
	*pPortCModeReg &= ~(3<<18);//0xFFF7FFFF; //Clear Moder9
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	601a      	str	r2, [r3, #0]
	*pPortCModeReg |= (1<<18); //0x00040000; //Set Moder9
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	601a      	str	r2, [r3, #0]
	 * 3. Set the 5th bit (PA5) of the output data register to make I/O pin-5 as HIGH.
	 * Set values using OR operation Clear values by AND operations.
	 * Set mask for PA5 -> 0x0020 [15:0]
	*/
	//Port A, PA5
	*ppPortAOutReg |= (1<<5);//0x0020;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0220 	orr.w	r2, r3, #32
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]


	//Port C, PC9
	*ppPortCOutReg |= (1<<9);//0x0200;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	for(int i; i < 5000; i++){};
 8000246:	e002      	b.n	800024e <main+0x76>
 8000248:	69fb      	ldr	r3, [r7, #28]
 800024a:	3301      	adds	r3, #1
 800024c:	61fb      	str	r3, [r7, #28]
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	f241 3287 	movw	r2, #4999	; 0x1387
 8000254:	4293      	cmp	r3, r2
 8000256:	ddf7      	ble.n	8000248 <main+0x70>
	*ppPortCOutReg |= ~(1<<9);//0x0200;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f463 7200 	orn	r2, r3, #512	; 0x200
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	601a      	str	r2, [r3, #0]
	for(int i; i < 5000; i++){};
 8000264:	e002      	b.n	800026c <main+0x94>
 8000266:	69bb      	ldr	r3, [r7, #24]
 8000268:	3301      	adds	r3, #1
 800026a:	61bb      	str	r3, [r7, #24]
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000272:	4293      	cmp	r3, r2
 8000274:	ddf7      	ble.n	8000266 <main+0x8e>
	*ppPortCOutReg |= (1<<9);//0x0200;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	601a      	str	r2, [r3, #0]
	for(int i; i < 5000; i++){};
 8000282:	e002      	b.n	800028a <main+0xb2>
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	3301      	adds	r3, #1
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000290:	4293      	cmp	r3, r2
 8000292:	ddf7      	ble.n	8000284 <main+0xac>
	*ppPortCOutReg |= ~(1<<9);//0x0200;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f463 7200 	orn	r2, r3, #512	; 0x200
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	601a      	str	r2, [r3, #0]

	while (1);
 80002a0:	e7fe      	b.n	80002a0 <main+0xc8>
 80002a2:	bf00      	nop
 80002a4:	40023830 	.word	0x40023830
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40020800 	.word	0x40020800
 80002b0:	40020014 	.word	0x40020014
 80002b4:	40020814 	.word	0x40020814

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff75 	bl	80001d8 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	; (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	; (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	; (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
