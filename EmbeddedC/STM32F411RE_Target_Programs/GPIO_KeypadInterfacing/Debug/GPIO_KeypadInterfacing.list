
GPIO_KeypadInterfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001100  08001100  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001100  08001100  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001100  08001100  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001100  08001100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001104  08001104  00011104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001164  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001164  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f17  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000367  00000000  00000000  00020fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00021350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00021470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b5f  00000000  00000000  00021535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001608  00000000  00000000  00024094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a66  00000000  00000000  0002569c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009fc  00000000  00000000  0002f104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001058 	.word	0x08001058

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08001058 	.word	0x08001058

080001d8 <main>:
void delay(void){
	for(uint32_t d = 0; d < 300000; d++);
}

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b092      	sub	sp, #72	; 0x48
 80001dc:	af00      	add	r7, sp, #0
	//Creating a pointer variable of RCC AHB1ENR Register with typedef structure.
	RCC_AHB1ENR_t volatile *const pClkCtrlReg = (RCC_AHB1ENR_t*)0x40023830;;
 80001de:	4b8f      	ldr	r3, [pc, #572]	; (800041c <main+0x244>)
 80001e0:	617b      	str	r3, [r7, #20]

	//Creating a pointer variable of GPIOC MODE Register with typedef structure.
	GPIOx_MODER_t volatile *const pGpioCModeReg = (GPIOx_MODER_t*)0x40020800;
 80001e2:	4b8f      	ldr	r3, [pc, #572]	; (8000420 <main+0x248>)
 80001e4:	613b      	str	r3, [r7, #16]

	//Creating a pointer variable of GPIOC Pull-Up/Pull-Down Register with typedef structure.
	GPIOx_PUPDR_t volatile *const pGpioCPUPDRReg = (GPIOx_PUPDR_t*)0x4002080C;
 80001e6:	4b8f      	ldr	r3, [pc, #572]	; (8000424 <main+0x24c>)
 80001e8:	60fb      	str	r3, [r7, #12]

	//Creating a pointer variable of GPIOC Input Data Register with typedef structure.
	GPIOx_IDR_t const volatile *const pGpioCInReg = (GPIOx_IDR_t*)0x40020810; //Input data register, and programmer should'nt write anything
 80001ea:	4b8f      	ldr	r3, [pc, #572]	; (8000428 <main+0x250>)
 80001ec:	60bb      	str	r3, [r7, #8]

	//Creating a pointer variable of GPIOx Output Data Register with typedef structure.
	GPIOx_ODR_t volatile *const pGpioCOutReg = (GPIOx_ODR_t*)0x40020814;
 80001ee:	4b8f      	ldr	r3, [pc, #572]	; (800042c <main+0x254>)
 80001f0:	607b      	str	r3, [r7, #4]

	//Enable RCC Clock for GPIO C Peripheral
	pClkCtrlReg->GPIOC_EN = 1;
 80001f2:	697a      	ldr	r2, [r7, #20]
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6013      	str	r3, [r2, #0]

	//Set GPIO C peripheral pins mode
	pGpioCModeReg->MODER10 = 0;	//PC10 i.e. C1 set as Input Mode
 80001fc:	693a      	ldr	r2, [r7, #16]
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	f36f 5315 	bfc	r3, #20, #2
 8000204:	6013      	str	r3, [r2, #0]
	pGpioCModeReg->MODER11 = 0;	//PC11 i.e. C2 set as Input Mode
 8000206:	693a      	ldr	r2, [r7, #16]
 8000208:	6813      	ldr	r3, [r2, #0]
 800020a:	f36f 5397 	bfc	r3, #22, #2
 800020e:	6013      	str	r3, [r2, #0]
	pGpioCModeReg->MODER12 = 0;	//PC12 i.e. C3 set as Input Mode
 8000210:	693a      	ldr	r2, [r7, #16]
 8000212:	6813      	ldr	r3, [r2, #0]
 8000214:	f36f 6319 	bfc	r3, #24, #2
 8000218:	6013      	str	r3, [r2, #0]

	pGpioCModeReg->MODER5 = 1;		//PC5 i.e R1 set as Output Mode
 800021a:	693a      	ldr	r2, [r7, #16]
 800021c:	6813      	ldr	r3, [r2, #0]
 800021e:	2101      	movs	r1, #1
 8000220:	f361 238b 	bfi	r3, r1, #10, #2
 8000224:	6013      	str	r3, [r2, #0]
	pGpioCModeReg->MODER6 = 1;		//PC6 i.e R2 set as Output Mode
 8000226:	693a      	ldr	r2, [r7, #16]
 8000228:	6813      	ldr	r3, [r2, #0]
 800022a:	2101      	movs	r1, #1
 800022c:	f361 330d 	bfi	r3, r1, #12, #2
 8000230:	6013      	str	r3, [r2, #0]
	pGpioCModeReg->MODER8 = 1;		//PC8 i.e R3 set as Output Mode
 8000232:	693a      	ldr	r2, [r7, #16]
 8000234:	6813      	ldr	r3, [r2, #0]
 8000236:	2101      	movs	r1, #1
 8000238:	f361 4311 	bfi	r3, r1, #16, #2
 800023c:	6013      	str	r3, [r2, #0]
	pGpioCModeReg->MODER9 = 1;		//PC9 i.e R4 set as Output Mode
 800023e:	693a      	ldr	r2, [r7, #16]
 8000240:	6813      	ldr	r3, [r2, #0]
 8000242:	2101      	movs	r1, #1
 8000244:	f361 4393 	bfi	r3, r1, #18, #2
 8000248:	6013      	str	r3, [r2, #0]

	//Set Pull-up configuration on Input pins 10,11,12
	pGpioCPUPDRReg->PUPDR10 = 1;	//Pull up configuration on PC10
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	2101      	movs	r1, #1
 8000250:	f361 5315 	bfi	r3, r1, #20, #2
 8000254:	6013      	str	r3, [r2, #0]
	pGpioCPUPDRReg->PUPDR11 = 1;	//Pull up configuration on PC11
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	6813      	ldr	r3, [r2, #0]
 800025a:	2101      	movs	r1, #1
 800025c:	f361 5397 	bfi	r3, r1, #22, #2
 8000260:	6013      	str	r3, [r2, #0]
	pGpioCPUPDRReg->PUPDR12 = 1;	//Pull up configuration on PC12
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	6813      	ldr	r3, [r2, #0]
 8000266:	2101      	movs	r1, #1
 8000268:	f361 6319 	bfi	r3, r1, #24, #2
 800026c:	6013      	str	r3, [r2, #0]

	//Making R1,R2,R3,R4 pins HIGH
	pGpioCOutReg->ODR5 = 1;
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]
	pGpioCOutReg->ODR6 = 1;
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000280:	6013      	str	r3, [r2, #0]
	pGpioCOutReg->ODR8 = 1;
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	6813      	ldr	r3, [r2, #0]
 8000286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800028a:	6013      	str	r3, [r2, #0]
	pGpioCOutReg->ODR9 = 1;
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000294:	6013      	str	r3, [r2, #0]

	while(1){
		//Reading Row 1  -- R1 = 0; R2 = 1; R3 = 1; R4 = 1
		pGpioCOutReg->ODR5 = 0;
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	6813      	ldr	r3, [r2, #0]
 800029a:	f36f 1345 	bfc	r3, #5, #1
 800029e:	6013      	str	r3, [r2, #0]
		if(pGpioCInReg->IDR10 == 0){
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d10c      	bne.n	80002c8 <main+0xf0>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 80002ae:	2300      	movs	r3, #0
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
 80002b2:	e002      	b.n	80002ba <main+0xe2>
 80002b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002b6:	3301      	adds	r3, #1
 80002b8:	647b      	str	r3, [r7, #68]	; 0x44
 80002ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002bc:	4a5c      	ldr	r2, [pc, #368]	; (8000430 <main+0x258>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	ddf8      	ble.n	80002b4 <main+0xdc>
			printf("Key is \'1\'\n");
 80002c2:	485c      	ldr	r0, [pc, #368]	; (8000434 <main+0x25c>)
 80002c4:	f000 fb32 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR11 == 0){
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d10c      	bne.n	80002f0 <main+0x118>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 80002d6:	2300      	movs	r3, #0
 80002d8:	643b      	str	r3, [r7, #64]	; 0x40
 80002da:	e002      	b.n	80002e2 <main+0x10a>
 80002dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002de:	3301      	adds	r3, #1
 80002e0:	643b      	str	r3, [r7, #64]	; 0x40
 80002e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002e4:	4a52      	ldr	r2, [pc, #328]	; (8000430 <main+0x258>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	ddf8      	ble.n	80002dc <main+0x104>
			printf("Key is \'2\'\n");
 80002ea:	4853      	ldr	r0, [pc, #332]	; (8000438 <main+0x260>)
 80002ec:	f000 fb1e 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR12 == 0){
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d10c      	bne.n	8000318 <main+0x140>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 80002fe:	2300      	movs	r3, #0
 8000300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000302:	e002      	b.n	800030a <main+0x132>
 8000304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000306:	3301      	adds	r3, #1
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800030a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800030c:	4a48      	ldr	r2, [pc, #288]	; (8000430 <main+0x258>)
 800030e:	4293      	cmp	r3, r2
 8000310:	ddf8      	ble.n	8000304 <main+0x12c>
			printf("Key is \'3\'\n");
 8000312:	484a      	ldr	r0, [pc, #296]	; (800043c <main+0x264>)
 8000314:	f000 fb0a 	bl	800092c <puts>
		}

		//Reading Row 2	 -- R1 = 1; R2 = 0; R3 = 1; R4 = 1
		pGpioCOutReg->ODR5 = 1;
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	6813      	ldr	r3, [r2, #0]
 800031c:	f043 0320 	orr.w	r3, r3, #32
 8000320:	6013      	str	r3, [r2, #0]
		pGpioCOutReg->ODR6 = 0;
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	6813      	ldr	r3, [r2, #0]
 8000326:	f36f 1386 	bfc	r3, #6, #1
 800032a:	6013      	str	r3, [r2, #0]
		if(pGpioCInReg->IDR10 == 0){
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d10c      	bne.n	8000354 <main+0x17c>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 800033a:	2300      	movs	r3, #0
 800033c:	63bb      	str	r3, [r7, #56]	; 0x38
 800033e:	e002      	b.n	8000346 <main+0x16e>
 8000340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000342:	3301      	adds	r3, #1
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
 8000346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000348:	4a39      	ldr	r2, [pc, #228]	; (8000430 <main+0x258>)
 800034a:	4293      	cmp	r3, r2
 800034c:	ddf8      	ble.n	8000340 <main+0x168>
			printf("Key is \'4\'\n");
 800034e:	483c      	ldr	r0, [pc, #240]	; (8000440 <main+0x268>)
 8000350:	f000 faec 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR11 == 0){
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d10c      	bne.n	800037c <main+0x1a4>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 8000362:	2300      	movs	r3, #0
 8000364:	637b      	str	r3, [r7, #52]	; 0x34
 8000366:	e002      	b.n	800036e <main+0x196>
 8000368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800036a:	3301      	adds	r3, #1
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
 800036e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000370:	4a2f      	ldr	r2, [pc, #188]	; (8000430 <main+0x258>)
 8000372:	4293      	cmp	r3, r2
 8000374:	ddf8      	ble.n	8000368 <main+0x190>
			printf("Key is \'5\'\n");
 8000376:	4833      	ldr	r0, [pc, #204]	; (8000444 <main+0x26c>)
 8000378:	f000 fad8 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR12 == 0){
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b00      	cmp	r3, #0
 8000388:	d10c      	bne.n	80003a4 <main+0x1cc>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 800038a:	2300      	movs	r3, #0
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
 800038e:	e002      	b.n	8000396 <main+0x1be>
 8000390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000392:	3301      	adds	r3, #1
 8000394:	633b      	str	r3, [r7, #48]	; 0x30
 8000396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000398:	4a25      	ldr	r2, [pc, #148]	; (8000430 <main+0x258>)
 800039a:	4293      	cmp	r3, r2
 800039c:	ddf8      	ble.n	8000390 <main+0x1b8>
			printf("Key is \'6\'\n");
 800039e:	482a      	ldr	r0, [pc, #168]	; (8000448 <main+0x270>)
 80003a0:	f000 fac4 	bl	800092c <puts>
		}

		//Reading Row 3  -- R1 = 1; R2 = 1; R3 = 0; R4 = 1
		pGpioCOutReg->ODR6 = 1;
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	6813      	ldr	r3, [r2, #0]
 80003a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ac:	6013      	str	r3, [r2, #0]
		pGpioCOutReg->ODR8 = 0;
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	6813      	ldr	r3, [r2, #0]
 80003b2:	f36f 2308 	bfc	r3, #8, #1
 80003b6:	6013      	str	r3, [r2, #0]
		if(pGpioCInReg->IDR10 == 0){
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d10c      	bne.n	80003e0 <main+0x208>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 80003c6:	2300      	movs	r3, #0
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003ca:	e002      	b.n	80003d2 <main+0x1fa>
 80003cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ce:	3301      	adds	r3, #1
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003d4:	4a16      	ldr	r2, [pc, #88]	; (8000430 <main+0x258>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	ddf8      	ble.n	80003cc <main+0x1f4>
			printf("Key is \'7\'\n");
 80003da:	481c      	ldr	r0, [pc, #112]	; (800044c <main+0x274>)
 80003dc:	f000 faa6 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR11 == 0){
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d10c      	bne.n	8000408 <main+0x230>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 80003ee:	2300      	movs	r3, #0
 80003f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80003f2:	e002      	b.n	80003fa <main+0x222>
 80003f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f6:	3301      	adds	r3, #1
 80003f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80003fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <main+0x258>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	ddf8      	ble.n	80003f4 <main+0x21c>
			printf("Key is \'8\'\n");
 8000402:	4813      	ldr	r0, [pc, #76]	; (8000450 <main+0x278>)
 8000404:	f000 fa92 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR12 == 0){
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d128      	bne.n	8000468 <main+0x290>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
 800041a:	e01e      	b.n	800045a <main+0x282>
 800041c:	40023830 	.word	0x40023830
 8000420:	40020800 	.word	0x40020800
 8000424:	4002080c 	.word	0x4002080c
 8000428:	40020810 	.word	0x40020810
 800042c:	40020814 	.word	0x40020814
 8000430:	00061a7f 	.word	0x00061a7f
 8000434:	08001070 	.word	0x08001070
 8000438:	0800107c 	.word	0x0800107c
 800043c:	08001088 	.word	0x08001088
 8000440:	08001094 	.word	0x08001094
 8000444:	080010a0 	.word	0x080010a0
 8000448:	080010ac 	.word	0x080010ac
 800044c:	080010b8 	.word	0x080010b8
 8000450:	080010c4 	.word	0x080010c4
 8000454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000456:	3301      	adds	r3, #1
 8000458:	627b      	str	r3, [r7, #36]	; 0x24
 800045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800045c:	4a28      	ldr	r2, [pc, #160]	; (8000500 <main+0x328>)
 800045e:	4293      	cmp	r3, r2
 8000460:	ddf8      	ble.n	8000454 <main+0x27c>
			printf("Key is \'9\'\n");
 8000462:	4828      	ldr	r0, [pc, #160]	; (8000504 <main+0x32c>)
 8000464:	f000 fa62 	bl	800092c <puts>
		}

		//Reading Row 3  -- R1 = 1; R2 = 1; R3 = 1; R4 = 0
		pGpioCOutReg->ODR8 = 1;
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	6813      	ldr	r3, [r2, #0]
 800046c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000470:	6013      	str	r3, [r2, #0]
		pGpioCOutReg->ODR9 = 0;
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	6813      	ldr	r3, [r2, #0]
 8000476:	f36f 2349 	bfc	r3, #9, #1
 800047a:	6013      	str	r3, [r2, #0]
		if(pGpioCInReg->IDR10 == 0){
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10c      	bne.n	80004a4 <main+0x2cc>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 800048a:	2300      	movs	r3, #0
 800048c:	623b      	str	r3, [r7, #32]
 800048e:	e002      	b.n	8000496 <main+0x2be>
 8000490:	6a3b      	ldr	r3, [r7, #32]
 8000492:	3301      	adds	r3, #1
 8000494:	623b      	str	r3, [r7, #32]
 8000496:	6a3b      	ldr	r3, [r7, #32]
 8000498:	4a19      	ldr	r2, [pc, #100]	; (8000500 <main+0x328>)
 800049a:	4293      	cmp	r3, r2
 800049c:	ddf8      	ble.n	8000490 <main+0x2b8>
			printf("Key is \'*\'\n");
 800049e:	481a      	ldr	r0, [pc, #104]	; (8000508 <main+0x330>)
 80004a0:	f000 fa44 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR11 == 0){
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d10c      	bne.n	80004cc <main+0x2f4>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
 80004b6:	e002      	b.n	80004be <main+0x2e6>
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	3301      	adds	r3, #1
 80004bc:	61fb      	str	r3, [r7, #28]
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <main+0x328>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	ddf8      	ble.n	80004b8 <main+0x2e0>
			printf("Key is \'0\'\n");
 80004c6:	4811      	ldr	r0, [pc, #68]	; (800050c <main+0x334>)
 80004c8:	f000 fa30 	bl	800092c <puts>
		}
		if(pGpioCInReg->IDR12 == 0){
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d10c      	bne.n	80004f4 <main+0x31c>
			for(int i=0; i < 400000; i++);	//for Key debouncing
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
 80004de:	e002      	b.n	80004e6 <main+0x30e>
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	3301      	adds	r3, #1
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	69bb      	ldr	r3, [r7, #24]
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <main+0x328>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	ddf8      	ble.n	80004e0 <main+0x308>
			printf("Key is \'#\'\n");
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <main+0x338>)
 80004f0:	f000 fa1c 	bl	800092c <puts>
		}
		pGpioCOutReg->ODR9 = 1;
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	6813      	ldr	r3, [r2, #0]
 80004f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fc:	6013      	str	r3, [r2, #0]
		pGpioCOutReg->ODR5 = 0;
 80004fe:	e6ca      	b.n	8000296 <main+0xbe>
 8000500:	00061a7f 	.word	0x00061a7f
 8000504:	080010d0 	.word	0x080010d0
 8000508:	080010dc 	.word	0x080010dc
 800050c:	080010e8 	.word	0x080010e8
 8000510:	080010f4 	.word	0x080010f4

08000514 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <ITM_SendChar+0x48>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <ITM_SendChar+0x48>)
 8000524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000528:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <ITM_SendChar+0x4c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <ITM_SendChar+0x4c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000536:	bf00      	nop
 8000538:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f8      	beq.n	8000538 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000546:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	6013      	str	r3, [r2, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000edfc 	.word	0xe000edfc
 8000560:	e0000e00 	.word	0xe0000e00

08000564 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	e00a      	b.n	800058c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000576:	f3af 8000 	nop.w
 800057a:	4601      	mov	r1, r0
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	60ba      	str	r2, [r7, #8]
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf0      	blt.n	8000576 <_read+0x12>
	}

return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b086      	sub	sp, #24
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e009      	b.n	80005c4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); //ITM Message Sending Function
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	60ba      	str	r2, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffab 	bl	8000514 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbf1      	blt.n	80005b0 <_write+0x12>
	}
	return len;
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <_close>:

int _close(int file)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return -1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <_isatty>:

int _isatty(int file)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	return 1;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
	return 0;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <_sbrk+0x5c>)
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <_sbrk+0x60>)
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <_sbrk+0x64>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <_sbrk+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d207      	bcs.n	8000680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000670:	f000 fa8a 	bl	8000b88 <__errno>
 8000674:	4603      	mov	r3, r0
 8000676:	220c      	movs	r2, #12
 8000678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	e009      	b.n	8000694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <_sbrk+0x64>)
 8000690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20020000 	.word	0x20020000
 80006a0:	00000400 	.word	0x00000400
 80006a4:	20000078 	.word	0x20000078
 80006a8:	200001c8 	.word	0x200001c8

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 fa5b 	bl	8000b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fd7b 	bl	80001d8 <main>

080006e2 <LoopForever>:

LoopForever:
  b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006f0:	08001108 	.word	0x08001108
  ldr r2, =_sbss
 80006f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006f8:	200001c8 	.word	0x200001c8

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <std>:
 8000700:	2300      	movs	r3, #0
 8000702:	b510      	push	{r4, lr}
 8000704:	4604      	mov	r4, r0
 8000706:	e9c0 3300 	strd	r3, r3, [r0]
 800070a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800070e:	6083      	str	r3, [r0, #8]
 8000710:	8181      	strh	r1, [r0, #12]
 8000712:	6643      	str	r3, [r0, #100]	; 0x64
 8000714:	81c2      	strh	r2, [r0, #14]
 8000716:	6183      	str	r3, [r0, #24]
 8000718:	4619      	mov	r1, r3
 800071a:	2208      	movs	r2, #8
 800071c:	305c      	adds	r0, #92	; 0x5c
 800071e:	f000 f9e5 	bl	8000aec <memset>
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <std+0x58>)
 8000724:	6263      	str	r3, [r4, #36]	; 0x24
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <std+0x5c>)
 8000728:	62a3      	str	r3, [r4, #40]	; 0x28
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <std+0x60>)
 800072c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <std+0x64>)
 8000730:	6323      	str	r3, [r4, #48]	; 0x30
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <std+0x68>)
 8000734:	6224      	str	r4, [r4, #32]
 8000736:	429c      	cmp	r4, r3
 8000738:	d006      	beq.n	8000748 <std+0x48>
 800073a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800073e:	4294      	cmp	r4, r2
 8000740:	d002      	beq.n	8000748 <std+0x48>
 8000742:	33d0      	adds	r3, #208	; 0xd0
 8000744:	429c      	cmp	r4, r3
 8000746:	d105      	bne.n	8000754 <std+0x54>
 8000748:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800074c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000750:	f000 ba44 	b.w	8000bdc <__retarget_lock_init_recursive>
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	0800093d 	.word	0x0800093d
 800075c:	0800095f 	.word	0x0800095f
 8000760:	08000997 	.word	0x08000997
 8000764:	080009bb 	.word	0x080009bb
 8000768:	2000007c 	.word	0x2000007c

0800076c <stdio_exit_handler>:
 800076c:	4a02      	ldr	r2, [pc, #8]	; (8000778 <stdio_exit_handler+0xc>)
 800076e:	4903      	ldr	r1, [pc, #12]	; (800077c <stdio_exit_handler+0x10>)
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <stdio_exit_handler+0x14>)
 8000772:	f000 b869 	b.w	8000848 <_fwalk_sglue>
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000
 800077c:	08000ee1 	.word	0x08000ee1
 8000780:	2000000c 	.word	0x2000000c

08000784 <cleanup_stdio>:
 8000784:	6841      	ldr	r1, [r0, #4]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <cleanup_stdio+0x34>)
 8000788:	4299      	cmp	r1, r3
 800078a:	b510      	push	{r4, lr}
 800078c:	4604      	mov	r4, r0
 800078e:	d001      	beq.n	8000794 <cleanup_stdio+0x10>
 8000790:	f000 fba6 	bl	8000ee0 <_fflush_r>
 8000794:	68a1      	ldr	r1, [r4, #8]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <cleanup_stdio+0x38>)
 8000798:	4299      	cmp	r1, r3
 800079a:	d002      	beq.n	80007a2 <cleanup_stdio+0x1e>
 800079c:	4620      	mov	r0, r4
 800079e:	f000 fb9f 	bl	8000ee0 <_fflush_r>
 80007a2:	68e1      	ldr	r1, [r4, #12]
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <cleanup_stdio+0x3c>)
 80007a6:	4299      	cmp	r1, r3
 80007a8:	d004      	beq.n	80007b4 <cleanup_stdio+0x30>
 80007aa:	4620      	mov	r0, r4
 80007ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b0:	f000 bb96 	b.w	8000ee0 <_fflush_r>
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	bf00      	nop
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	200000e4 	.word	0x200000e4
 80007c0:	2000014c 	.word	0x2000014c

080007c4 <global_stdio_init.part.0>:
 80007c4:	b510      	push	{r4, lr}
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <global_stdio_init.part.0+0x30>)
 80007c8:	4c0b      	ldr	r4, [pc, #44]	; (80007f8 <global_stdio_init.part.0+0x34>)
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <global_stdio_init.part.0+0x38>)
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	4620      	mov	r0, r4
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	f7ff ff94 	bl	8000700 <std>
 80007d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007dc:	2201      	movs	r2, #1
 80007de:	2109      	movs	r1, #9
 80007e0:	f7ff ff8e 	bl	8000700 <std>
 80007e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007e8:	2202      	movs	r2, #2
 80007ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ee:	2112      	movs	r1, #18
 80007f0:	f7ff bf86 	b.w	8000700 <std>
 80007f4:	200001b4 	.word	0x200001b4
 80007f8:	2000007c 	.word	0x2000007c
 80007fc:	0800076d 	.word	0x0800076d

08000800 <__sfp_lock_acquire>:
 8000800:	4801      	ldr	r0, [pc, #4]	; (8000808 <__sfp_lock_acquire+0x8>)
 8000802:	f000 b9ec 	b.w	8000bde <__retarget_lock_acquire_recursive>
 8000806:	bf00      	nop
 8000808:	200001bd 	.word	0x200001bd

0800080c <__sfp_lock_release>:
 800080c:	4801      	ldr	r0, [pc, #4]	; (8000814 <__sfp_lock_release+0x8>)
 800080e:	f000 b9e7 	b.w	8000be0 <__retarget_lock_release_recursive>
 8000812:	bf00      	nop
 8000814:	200001bd 	.word	0x200001bd

08000818 <__sinit>:
 8000818:	b510      	push	{r4, lr}
 800081a:	4604      	mov	r4, r0
 800081c:	f7ff fff0 	bl	8000800 <__sfp_lock_acquire>
 8000820:	6a23      	ldr	r3, [r4, #32]
 8000822:	b11b      	cbz	r3, 800082c <__sinit+0x14>
 8000824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000828:	f7ff bff0 	b.w	800080c <__sfp_lock_release>
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__sinit+0x28>)
 800082e:	6223      	str	r3, [r4, #32]
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__sinit+0x2c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1f5      	bne.n	8000824 <__sinit+0xc>
 8000838:	f7ff ffc4 	bl	80007c4 <global_stdio_init.part.0>
 800083c:	e7f2      	b.n	8000824 <__sinit+0xc>
 800083e:	bf00      	nop
 8000840:	08000785 	.word	0x08000785
 8000844:	200001b4 	.word	0x200001b4

08000848 <_fwalk_sglue>:
 8000848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800084c:	4607      	mov	r7, r0
 800084e:	4688      	mov	r8, r1
 8000850:	4614      	mov	r4, r2
 8000852:	2600      	movs	r6, #0
 8000854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000858:	f1b9 0901 	subs.w	r9, r9, #1
 800085c:	d505      	bpl.n	800086a <_fwalk_sglue+0x22>
 800085e:	6824      	ldr	r4, [r4, #0]
 8000860:	2c00      	cmp	r4, #0
 8000862:	d1f7      	bne.n	8000854 <_fwalk_sglue+0xc>
 8000864:	4630      	mov	r0, r6
 8000866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800086a:	89ab      	ldrh	r3, [r5, #12]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d907      	bls.n	8000880 <_fwalk_sglue+0x38>
 8000870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000874:	3301      	adds	r3, #1
 8000876:	d003      	beq.n	8000880 <_fwalk_sglue+0x38>
 8000878:	4629      	mov	r1, r5
 800087a:	4638      	mov	r0, r7
 800087c:	47c0      	blx	r8
 800087e:	4306      	orrs	r6, r0
 8000880:	3568      	adds	r5, #104	; 0x68
 8000882:	e7e9      	b.n	8000858 <_fwalk_sglue+0x10>

08000884 <_puts_r>:
 8000884:	6a03      	ldr	r3, [r0, #32]
 8000886:	b570      	push	{r4, r5, r6, lr}
 8000888:	6884      	ldr	r4, [r0, #8]
 800088a:	4605      	mov	r5, r0
 800088c:	460e      	mov	r6, r1
 800088e:	b90b      	cbnz	r3, 8000894 <_puts_r+0x10>
 8000890:	f7ff ffc2 	bl	8000818 <__sinit>
 8000894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000896:	07db      	lsls	r3, r3, #31
 8000898:	d405      	bmi.n	80008a6 <_puts_r+0x22>
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	0598      	lsls	r0, r3, #22
 800089e:	d402      	bmi.n	80008a6 <_puts_r+0x22>
 80008a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008a2:	f000 f99c 	bl	8000bde <__retarget_lock_acquire_recursive>
 80008a6:	89a3      	ldrh	r3, [r4, #12]
 80008a8:	0719      	lsls	r1, r3, #28
 80008aa:	d513      	bpl.n	80008d4 <_puts_r+0x50>
 80008ac:	6923      	ldr	r3, [r4, #16]
 80008ae:	b18b      	cbz	r3, 80008d4 <_puts_r+0x50>
 80008b0:	3e01      	subs	r6, #1
 80008b2:	68a3      	ldr	r3, [r4, #8]
 80008b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008b8:	3b01      	subs	r3, #1
 80008ba:	60a3      	str	r3, [r4, #8]
 80008bc:	b9e9      	cbnz	r1, 80008fa <_puts_r+0x76>
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da2e      	bge.n	8000920 <_puts_r+0x9c>
 80008c2:	4622      	mov	r2, r4
 80008c4:	210a      	movs	r1, #10
 80008c6:	4628      	mov	r0, r5
 80008c8:	f000 f87b 	bl	80009c2 <__swbuf_r>
 80008cc:	3001      	adds	r0, #1
 80008ce:	d007      	beq.n	80008e0 <_puts_r+0x5c>
 80008d0:	250a      	movs	r5, #10
 80008d2:	e007      	b.n	80008e4 <_puts_r+0x60>
 80008d4:	4621      	mov	r1, r4
 80008d6:	4628      	mov	r0, r5
 80008d8:	f000 f8b0 	bl	8000a3c <__swsetup_r>
 80008dc:	2800      	cmp	r0, #0
 80008de:	d0e7      	beq.n	80008b0 <_puts_r+0x2c>
 80008e0:	f04f 35ff 	mov.w	r5, #4294967295
 80008e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008e6:	07da      	lsls	r2, r3, #31
 80008e8:	d405      	bmi.n	80008f6 <_puts_r+0x72>
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	059b      	lsls	r3, r3, #22
 80008ee:	d402      	bmi.n	80008f6 <_puts_r+0x72>
 80008f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008f2:	f000 f975 	bl	8000be0 <__retarget_lock_release_recursive>
 80008f6:	4628      	mov	r0, r5
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	da04      	bge.n	8000908 <_puts_r+0x84>
 80008fe:	69a2      	ldr	r2, [r4, #24]
 8000900:	429a      	cmp	r2, r3
 8000902:	dc06      	bgt.n	8000912 <_puts_r+0x8e>
 8000904:	290a      	cmp	r1, #10
 8000906:	d004      	beq.n	8000912 <_puts_r+0x8e>
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	6022      	str	r2, [r4, #0]
 800090e:	7019      	strb	r1, [r3, #0]
 8000910:	e7cf      	b.n	80008b2 <_puts_r+0x2e>
 8000912:	4622      	mov	r2, r4
 8000914:	4628      	mov	r0, r5
 8000916:	f000 f854 	bl	80009c2 <__swbuf_r>
 800091a:	3001      	adds	r0, #1
 800091c:	d1c9      	bne.n	80008b2 <_puts_r+0x2e>
 800091e:	e7df      	b.n	80008e0 <_puts_r+0x5c>
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	250a      	movs	r5, #10
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	6022      	str	r2, [r4, #0]
 8000928:	701d      	strb	r5, [r3, #0]
 800092a:	e7db      	b.n	80008e4 <_puts_r+0x60>

0800092c <puts>:
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <puts+0xc>)
 800092e:	4601      	mov	r1, r0
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	f7ff bfa7 	b.w	8000884 <_puts_r>
 8000936:	bf00      	nop
 8000938:	20000058 	.word	0x20000058

0800093c <__sread>:
 800093c:	b510      	push	{r4, lr}
 800093e:	460c      	mov	r4, r1
 8000940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000944:	f000 f8fc 	bl	8000b40 <_read_r>
 8000948:	2800      	cmp	r0, #0
 800094a:	bfab      	itete	ge
 800094c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800094e:	89a3      	ldrhlt	r3, [r4, #12]
 8000950:	181b      	addge	r3, r3, r0
 8000952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000956:	bfac      	ite	ge
 8000958:	6563      	strge	r3, [r4, #84]	; 0x54
 800095a:	81a3      	strhlt	r3, [r4, #12]
 800095c:	bd10      	pop	{r4, pc}

0800095e <__swrite>:
 800095e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000962:	461f      	mov	r7, r3
 8000964:	898b      	ldrh	r3, [r1, #12]
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	4605      	mov	r5, r0
 800096a:	460c      	mov	r4, r1
 800096c:	4616      	mov	r6, r2
 800096e:	d505      	bpl.n	800097c <__swrite+0x1e>
 8000970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000974:	2302      	movs	r3, #2
 8000976:	2200      	movs	r2, #0
 8000978:	f000 f8d0 	bl	8000b1c <_lseek_r>
 800097c:	89a3      	ldrh	r3, [r4, #12]
 800097e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000986:	81a3      	strh	r3, [r4, #12]
 8000988:	4632      	mov	r2, r6
 800098a:	463b      	mov	r3, r7
 800098c:	4628      	mov	r0, r5
 800098e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000992:	f000 b8e7 	b.w	8000b64 <_write_r>

08000996 <__sseek>:
 8000996:	b510      	push	{r4, lr}
 8000998:	460c      	mov	r4, r1
 800099a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800099e:	f000 f8bd 	bl	8000b1c <_lseek_r>
 80009a2:	1c43      	adds	r3, r0, #1
 80009a4:	89a3      	ldrh	r3, [r4, #12]
 80009a6:	bf15      	itete	ne
 80009a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80009aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80009ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80009b2:	81a3      	strheq	r3, [r4, #12]
 80009b4:	bf18      	it	ne
 80009b6:	81a3      	strhne	r3, [r4, #12]
 80009b8:	bd10      	pop	{r4, pc}

080009ba <__sclose>:
 80009ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009be:	f000 b89d 	b.w	8000afc <_close_r>

080009c2 <__swbuf_r>:
 80009c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c4:	460e      	mov	r6, r1
 80009c6:	4614      	mov	r4, r2
 80009c8:	4605      	mov	r5, r0
 80009ca:	b118      	cbz	r0, 80009d4 <__swbuf_r+0x12>
 80009cc:	6a03      	ldr	r3, [r0, #32]
 80009ce:	b90b      	cbnz	r3, 80009d4 <__swbuf_r+0x12>
 80009d0:	f7ff ff22 	bl	8000818 <__sinit>
 80009d4:	69a3      	ldr	r3, [r4, #24]
 80009d6:	60a3      	str	r3, [r4, #8]
 80009d8:	89a3      	ldrh	r3, [r4, #12]
 80009da:	071a      	lsls	r2, r3, #28
 80009dc:	d525      	bpl.n	8000a2a <__swbuf_r+0x68>
 80009de:	6923      	ldr	r3, [r4, #16]
 80009e0:	b31b      	cbz	r3, 8000a2a <__swbuf_r+0x68>
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	6922      	ldr	r2, [r4, #16]
 80009e6:	1a98      	subs	r0, r3, r2
 80009e8:	6963      	ldr	r3, [r4, #20]
 80009ea:	b2f6      	uxtb	r6, r6
 80009ec:	4283      	cmp	r3, r0
 80009ee:	4637      	mov	r7, r6
 80009f0:	dc04      	bgt.n	80009fc <__swbuf_r+0x3a>
 80009f2:	4621      	mov	r1, r4
 80009f4:	4628      	mov	r0, r5
 80009f6:	f000 fa73 	bl	8000ee0 <_fflush_r>
 80009fa:	b9e0      	cbnz	r0, 8000a36 <__swbuf_r+0x74>
 80009fc:	68a3      	ldr	r3, [r4, #8]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	60a3      	str	r3, [r4, #8]
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	6022      	str	r2, [r4, #0]
 8000a08:	701e      	strb	r6, [r3, #0]
 8000a0a:	6962      	ldr	r2, [r4, #20]
 8000a0c:	1c43      	adds	r3, r0, #1
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d004      	beq.n	8000a1c <__swbuf_r+0x5a>
 8000a12:	89a3      	ldrh	r3, [r4, #12]
 8000a14:	07db      	lsls	r3, r3, #31
 8000a16:	d506      	bpl.n	8000a26 <__swbuf_r+0x64>
 8000a18:	2e0a      	cmp	r6, #10
 8000a1a:	d104      	bne.n	8000a26 <__swbuf_r+0x64>
 8000a1c:	4621      	mov	r1, r4
 8000a1e:	4628      	mov	r0, r5
 8000a20:	f000 fa5e 	bl	8000ee0 <_fflush_r>
 8000a24:	b938      	cbnz	r0, 8000a36 <__swbuf_r+0x74>
 8000a26:	4638      	mov	r0, r7
 8000a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	f000 f805 	bl	8000a3c <__swsetup_r>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d0d5      	beq.n	80009e2 <__swbuf_r+0x20>
 8000a36:	f04f 37ff 	mov.w	r7, #4294967295
 8000a3a:	e7f4      	b.n	8000a26 <__swbuf_r+0x64>

08000a3c <__swsetup_r>:
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <__swsetup_r+0xac>)
 8000a40:	4605      	mov	r5, r0
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	460c      	mov	r4, r1
 8000a46:	b118      	cbz	r0, 8000a50 <__swsetup_r+0x14>
 8000a48:	6a03      	ldr	r3, [r0, #32]
 8000a4a:	b90b      	cbnz	r3, 8000a50 <__swsetup_r+0x14>
 8000a4c:	f7ff fee4 	bl	8000818 <__sinit>
 8000a50:	89a3      	ldrh	r3, [r4, #12]
 8000a52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a56:	0718      	lsls	r0, r3, #28
 8000a58:	d422      	bmi.n	8000aa0 <__swsetup_r+0x64>
 8000a5a:	06d9      	lsls	r1, r3, #27
 8000a5c:	d407      	bmi.n	8000a6e <__swsetup_r+0x32>
 8000a5e:	2309      	movs	r3, #9
 8000a60:	602b      	str	r3, [r5, #0]
 8000a62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a66:	81a3      	strh	r3, [r4, #12]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	e034      	b.n	8000ad8 <__swsetup_r+0x9c>
 8000a6e:	0758      	lsls	r0, r3, #29
 8000a70:	d512      	bpl.n	8000a98 <__swsetup_r+0x5c>
 8000a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a74:	b141      	cbz	r1, 8000a88 <__swsetup_r+0x4c>
 8000a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d002      	beq.n	8000a84 <__swsetup_r+0x48>
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f000 f8b0 	bl	8000be4 <_free_r>
 8000a84:	2300      	movs	r3, #0
 8000a86:	6363      	str	r3, [r4, #52]	; 0x34
 8000a88:	89a3      	ldrh	r3, [r4, #12]
 8000a8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a8e:	81a3      	strh	r3, [r4, #12]
 8000a90:	2300      	movs	r3, #0
 8000a92:	6063      	str	r3, [r4, #4]
 8000a94:	6923      	ldr	r3, [r4, #16]
 8000a96:	6023      	str	r3, [r4, #0]
 8000a98:	89a3      	ldrh	r3, [r4, #12]
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	81a3      	strh	r3, [r4, #12]
 8000aa0:	6923      	ldr	r3, [r4, #16]
 8000aa2:	b94b      	cbnz	r3, 8000ab8 <__swsetup_r+0x7c>
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aae:	d003      	beq.n	8000ab8 <__swsetup_r+0x7c>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	f000 fa62 	bl	8000f7c <__smakebuf_r>
 8000ab8:	89a0      	ldrh	r0, [r4, #12]
 8000aba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000abe:	f010 0301 	ands.w	r3, r0, #1
 8000ac2:	d00a      	beq.n	8000ada <__swsetup_r+0x9e>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60a3      	str	r3, [r4, #8]
 8000ac8:	6963      	ldr	r3, [r4, #20]
 8000aca:	425b      	negs	r3, r3
 8000acc:	61a3      	str	r3, [r4, #24]
 8000ace:	6923      	ldr	r3, [r4, #16]
 8000ad0:	b943      	cbnz	r3, 8000ae4 <__swsetup_r+0xa8>
 8000ad2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ad6:	d1c4      	bne.n	8000a62 <__swsetup_r+0x26>
 8000ad8:	bd38      	pop	{r3, r4, r5, pc}
 8000ada:	0781      	lsls	r1, r0, #30
 8000adc:	bf58      	it	pl
 8000ade:	6963      	ldrpl	r3, [r4, #20]
 8000ae0:	60a3      	str	r3, [r4, #8]
 8000ae2:	e7f4      	b.n	8000ace <__swsetup_r+0x92>
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e7f7      	b.n	8000ad8 <__swsetup_r+0x9c>
 8000ae8:	20000058 	.word	0x20000058

08000aec <memset>:
 8000aec:	4402      	add	r2, r0
 8000aee:	4603      	mov	r3, r0
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d100      	bne.n	8000af6 <memset+0xa>
 8000af4:	4770      	bx	lr
 8000af6:	f803 1b01 	strb.w	r1, [r3], #1
 8000afa:	e7f9      	b.n	8000af0 <memset+0x4>

08000afc <_close_r>:
 8000afc:	b538      	push	{r3, r4, r5, lr}
 8000afe:	4d06      	ldr	r5, [pc, #24]	; (8000b18 <_close_r+0x1c>)
 8000b00:	2300      	movs	r3, #0
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	602b      	str	r3, [r5, #0]
 8000b08:	f7ff fd65 	bl	80005d6 <_close>
 8000b0c:	1c43      	adds	r3, r0, #1
 8000b0e:	d102      	bne.n	8000b16 <_close_r+0x1a>
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	b103      	cbz	r3, 8000b16 <_close_r+0x1a>
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	bd38      	pop	{r3, r4, r5, pc}
 8000b18:	200001b8 	.word	0x200001b8

08000b1c <_lseek_r>:
 8000b1c:	b538      	push	{r3, r4, r5, lr}
 8000b1e:	4d07      	ldr	r5, [pc, #28]	; (8000b3c <_lseek_r+0x20>)
 8000b20:	4604      	mov	r4, r0
 8000b22:	4608      	mov	r0, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	602a      	str	r2, [r5, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	f7ff fd7a 	bl	8000624 <_lseek>
 8000b30:	1c43      	adds	r3, r0, #1
 8000b32:	d102      	bne.n	8000b3a <_lseek_r+0x1e>
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	b103      	cbz	r3, 8000b3a <_lseek_r+0x1e>
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	bd38      	pop	{r3, r4, r5, pc}
 8000b3c:	200001b8 	.word	0x200001b8

08000b40 <_read_r>:
 8000b40:	b538      	push	{r3, r4, r5, lr}
 8000b42:	4d07      	ldr	r5, [pc, #28]	; (8000b60 <_read_r+0x20>)
 8000b44:	4604      	mov	r4, r0
 8000b46:	4608      	mov	r0, r1
 8000b48:	4611      	mov	r1, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	602a      	str	r2, [r5, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f7ff fd08 	bl	8000564 <_read>
 8000b54:	1c43      	adds	r3, r0, #1
 8000b56:	d102      	bne.n	8000b5e <_read_r+0x1e>
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	b103      	cbz	r3, 8000b5e <_read_r+0x1e>
 8000b5c:	6023      	str	r3, [r4, #0]
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
 8000b60:	200001b8 	.word	0x200001b8

08000b64 <_write_r>:
 8000b64:	b538      	push	{r3, r4, r5, lr}
 8000b66:	4d07      	ldr	r5, [pc, #28]	; (8000b84 <_write_r+0x20>)
 8000b68:	4604      	mov	r4, r0
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	602a      	str	r2, [r5, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	f7ff fd13 	bl	800059e <_write>
 8000b78:	1c43      	adds	r3, r0, #1
 8000b7a:	d102      	bne.n	8000b82 <_write_r+0x1e>
 8000b7c:	682b      	ldr	r3, [r5, #0]
 8000b7e:	b103      	cbz	r3, 8000b82 <_write_r+0x1e>
 8000b80:	6023      	str	r3, [r4, #0]
 8000b82:	bd38      	pop	{r3, r4, r5, pc}
 8000b84:	200001b8 	.word	0x200001b8

08000b88 <__errno>:
 8000b88:	4b01      	ldr	r3, [pc, #4]	; (8000b90 <__errno+0x8>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000058 	.word	0x20000058

08000b94 <__libc_init_array>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	4d0d      	ldr	r5, [pc, #52]	; (8000bcc <__libc_init_array+0x38>)
 8000b98:	4c0d      	ldr	r4, [pc, #52]	; (8000bd0 <__libc_init_array+0x3c>)
 8000b9a:	1b64      	subs	r4, r4, r5
 8000b9c:	10a4      	asrs	r4, r4, #2
 8000b9e:	2600      	movs	r6, #0
 8000ba0:	42a6      	cmp	r6, r4
 8000ba2:	d109      	bne.n	8000bb8 <__libc_init_array+0x24>
 8000ba4:	4d0b      	ldr	r5, [pc, #44]	; (8000bd4 <__libc_init_array+0x40>)
 8000ba6:	4c0c      	ldr	r4, [pc, #48]	; (8000bd8 <__libc_init_array+0x44>)
 8000ba8:	f000 fa56 	bl	8001058 <_init>
 8000bac:	1b64      	subs	r4, r4, r5
 8000bae:	10a4      	asrs	r4, r4, #2
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	42a6      	cmp	r6, r4
 8000bb4:	d105      	bne.n	8000bc2 <__libc_init_array+0x2e>
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bbc:	4798      	blx	r3
 8000bbe:	3601      	adds	r6, #1
 8000bc0:	e7ee      	b.n	8000ba0 <__libc_init_array+0xc>
 8000bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc6:	4798      	blx	r3
 8000bc8:	3601      	adds	r6, #1
 8000bca:	e7f2      	b.n	8000bb2 <__libc_init_array+0x1e>
 8000bcc:	08001100 	.word	0x08001100
 8000bd0:	08001100 	.word	0x08001100
 8000bd4:	08001100 	.word	0x08001100
 8000bd8:	08001104 	.word	0x08001104

08000bdc <__retarget_lock_init_recursive>:
 8000bdc:	4770      	bx	lr

08000bde <__retarget_lock_acquire_recursive>:
 8000bde:	4770      	bx	lr

08000be0 <__retarget_lock_release_recursive>:
 8000be0:	4770      	bx	lr
	...

08000be4 <_free_r>:
 8000be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d044      	beq.n	8000c74 <_free_r+0x90>
 8000bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bee:	9001      	str	r0, [sp, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8000bf6:	bfb8      	it	lt
 8000bf8:	18e4      	addlt	r4, r4, r3
 8000bfa:	f000 f8df 	bl	8000dbc <__malloc_lock>
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <_free_r+0x94>)
 8000c00:	9801      	ldr	r0, [sp, #4]
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	b933      	cbnz	r3, 8000c14 <_free_r+0x30>
 8000c06:	6063      	str	r3, [r4, #4]
 8000c08:	6014      	str	r4, [r2, #0]
 8000c0a:	b003      	add	sp, #12
 8000c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c10:	f000 b8da 	b.w	8000dc8 <__malloc_unlock>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	d908      	bls.n	8000c2a <_free_r+0x46>
 8000c18:	6825      	ldr	r5, [r4, #0]
 8000c1a:	1961      	adds	r1, r4, r5
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	bf01      	itttt	eq
 8000c20:	6819      	ldreq	r1, [r3, #0]
 8000c22:	685b      	ldreq	r3, [r3, #4]
 8000c24:	1949      	addeq	r1, r1, r5
 8000c26:	6021      	streq	r1, [r4, #0]
 8000c28:	e7ed      	b.n	8000c06 <_free_r+0x22>
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	b10b      	cbz	r3, 8000c34 <_free_r+0x50>
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	d9fa      	bls.n	8000c2a <_free_r+0x46>
 8000c34:	6811      	ldr	r1, [r2, #0]
 8000c36:	1855      	adds	r5, r2, r1
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	d10b      	bne.n	8000c54 <_free_r+0x70>
 8000c3c:	6824      	ldr	r4, [r4, #0]
 8000c3e:	4421      	add	r1, r4
 8000c40:	1854      	adds	r4, r2, r1
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	6011      	str	r1, [r2, #0]
 8000c46:	d1e0      	bne.n	8000c0a <_free_r+0x26>
 8000c48:	681c      	ldr	r4, [r3, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	6053      	str	r3, [r2, #4]
 8000c4e:	440c      	add	r4, r1
 8000c50:	6014      	str	r4, [r2, #0]
 8000c52:	e7da      	b.n	8000c0a <_free_r+0x26>
 8000c54:	d902      	bls.n	8000c5c <_free_r+0x78>
 8000c56:	230c      	movs	r3, #12
 8000c58:	6003      	str	r3, [r0, #0]
 8000c5a:	e7d6      	b.n	8000c0a <_free_r+0x26>
 8000c5c:	6825      	ldr	r5, [r4, #0]
 8000c5e:	1961      	adds	r1, r4, r5
 8000c60:	428b      	cmp	r3, r1
 8000c62:	bf04      	itt	eq
 8000c64:	6819      	ldreq	r1, [r3, #0]
 8000c66:	685b      	ldreq	r3, [r3, #4]
 8000c68:	6063      	str	r3, [r4, #4]
 8000c6a:	bf04      	itt	eq
 8000c6c:	1949      	addeq	r1, r1, r5
 8000c6e:	6021      	streq	r1, [r4, #0]
 8000c70:	6054      	str	r4, [r2, #4]
 8000c72:	e7ca      	b.n	8000c0a <_free_r+0x26>
 8000c74:	b003      	add	sp, #12
 8000c76:	bd30      	pop	{r4, r5, pc}
 8000c78:	200001c0 	.word	0x200001c0

08000c7c <sbrk_aligned>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	4e0e      	ldr	r6, [pc, #56]	; (8000cb8 <sbrk_aligned+0x3c>)
 8000c80:	460c      	mov	r4, r1
 8000c82:	6831      	ldr	r1, [r6, #0]
 8000c84:	4605      	mov	r5, r0
 8000c86:	b911      	cbnz	r1, 8000c8e <sbrk_aligned+0x12>
 8000c88:	f000 f9d6 	bl	8001038 <_sbrk_r>
 8000c8c:	6030      	str	r0, [r6, #0]
 8000c8e:	4621      	mov	r1, r4
 8000c90:	4628      	mov	r0, r5
 8000c92:	f000 f9d1 	bl	8001038 <_sbrk_r>
 8000c96:	1c43      	adds	r3, r0, #1
 8000c98:	d00a      	beq.n	8000cb0 <sbrk_aligned+0x34>
 8000c9a:	1cc4      	adds	r4, r0, #3
 8000c9c:	f024 0403 	bic.w	r4, r4, #3
 8000ca0:	42a0      	cmp	r0, r4
 8000ca2:	d007      	beq.n	8000cb4 <sbrk_aligned+0x38>
 8000ca4:	1a21      	subs	r1, r4, r0
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	f000 f9c6 	bl	8001038 <_sbrk_r>
 8000cac:	3001      	adds	r0, #1
 8000cae:	d101      	bne.n	8000cb4 <sbrk_aligned+0x38>
 8000cb0:	f04f 34ff 	mov.w	r4, #4294967295
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
 8000cb8:	200001c4 	.word	0x200001c4

08000cbc <_malloc_r>:
 8000cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cc0:	1ccd      	adds	r5, r1, #3
 8000cc2:	f025 0503 	bic.w	r5, r5, #3
 8000cc6:	3508      	adds	r5, #8
 8000cc8:	2d0c      	cmp	r5, #12
 8000cca:	bf38      	it	cc
 8000ccc:	250c      	movcc	r5, #12
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	4607      	mov	r7, r0
 8000cd2:	db01      	blt.n	8000cd8 <_malloc_r+0x1c>
 8000cd4:	42a9      	cmp	r1, r5
 8000cd6:	d905      	bls.n	8000ce4 <_malloc_r+0x28>
 8000cd8:	230c      	movs	r3, #12
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	2600      	movs	r6, #0
 8000cde:	4630      	mov	r0, r6
 8000ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ce4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000db8 <_malloc_r+0xfc>
 8000ce8:	f000 f868 	bl	8000dbc <__malloc_lock>
 8000cec:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf0:	461c      	mov	r4, r3
 8000cf2:	bb5c      	cbnz	r4, 8000d4c <_malloc_r+0x90>
 8000cf4:	4629      	mov	r1, r5
 8000cf6:	4638      	mov	r0, r7
 8000cf8:	f7ff ffc0 	bl	8000c7c <sbrk_aligned>
 8000cfc:	1c43      	adds	r3, r0, #1
 8000cfe:	4604      	mov	r4, r0
 8000d00:	d155      	bne.n	8000dae <_malloc_r+0xf2>
 8000d02:	f8d8 4000 	ldr.w	r4, [r8]
 8000d06:	4626      	mov	r6, r4
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d145      	bne.n	8000d98 <_malloc_r+0xdc>
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	d048      	beq.n	8000da2 <_malloc_r+0xe6>
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	4631      	mov	r1, r6
 8000d14:	4638      	mov	r0, r7
 8000d16:	eb04 0903 	add.w	r9, r4, r3
 8000d1a:	f000 f98d 	bl	8001038 <_sbrk_r>
 8000d1e:	4581      	cmp	r9, r0
 8000d20:	d13f      	bne.n	8000da2 <_malloc_r+0xe6>
 8000d22:	6821      	ldr	r1, [r4, #0]
 8000d24:	1a6d      	subs	r5, r5, r1
 8000d26:	4629      	mov	r1, r5
 8000d28:	4638      	mov	r0, r7
 8000d2a:	f7ff ffa7 	bl	8000c7c <sbrk_aligned>
 8000d2e:	3001      	adds	r0, #1
 8000d30:	d037      	beq.n	8000da2 <_malloc_r+0xe6>
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	442b      	add	r3, r5
 8000d36:	6023      	str	r3, [r4, #0]
 8000d38:	f8d8 3000 	ldr.w	r3, [r8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d038      	beq.n	8000db2 <_malloc_r+0xf6>
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	42a2      	cmp	r2, r4
 8000d44:	d12b      	bne.n	8000d9e <_malloc_r+0xe2>
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	e00f      	b.n	8000d6c <_malloc_r+0xb0>
 8000d4c:	6822      	ldr	r2, [r4, #0]
 8000d4e:	1b52      	subs	r2, r2, r5
 8000d50:	d41f      	bmi.n	8000d92 <_malloc_r+0xd6>
 8000d52:	2a0b      	cmp	r2, #11
 8000d54:	d917      	bls.n	8000d86 <_malloc_r+0xca>
 8000d56:	1961      	adds	r1, r4, r5
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	6025      	str	r5, [r4, #0]
 8000d5c:	bf18      	it	ne
 8000d5e:	6059      	strne	r1, [r3, #4]
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	bf08      	it	eq
 8000d64:	f8c8 1000 	streq.w	r1, [r8]
 8000d68:	5162      	str	r2, [r4, r5]
 8000d6a:	604b      	str	r3, [r1, #4]
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	f104 060b 	add.w	r6, r4, #11
 8000d72:	f000 f829 	bl	8000dc8 <__malloc_unlock>
 8000d76:	f026 0607 	bic.w	r6, r6, #7
 8000d7a:	1d23      	adds	r3, r4, #4
 8000d7c:	1af2      	subs	r2, r6, r3
 8000d7e:	d0ae      	beq.n	8000cde <_malloc_r+0x22>
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	50a3      	str	r3, [r4, r2]
 8000d84:	e7ab      	b.n	8000cde <_malloc_r+0x22>
 8000d86:	42a3      	cmp	r3, r4
 8000d88:	6862      	ldr	r2, [r4, #4]
 8000d8a:	d1dd      	bne.n	8000d48 <_malloc_r+0x8c>
 8000d8c:	f8c8 2000 	str.w	r2, [r8]
 8000d90:	e7ec      	b.n	8000d6c <_malloc_r+0xb0>
 8000d92:	4623      	mov	r3, r4
 8000d94:	6864      	ldr	r4, [r4, #4]
 8000d96:	e7ac      	b.n	8000cf2 <_malloc_r+0x36>
 8000d98:	4634      	mov	r4, r6
 8000d9a:	6876      	ldr	r6, [r6, #4]
 8000d9c:	e7b4      	b.n	8000d08 <_malloc_r+0x4c>
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7cc      	b.n	8000d3c <_malloc_r+0x80>
 8000da2:	230c      	movs	r3, #12
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4638      	mov	r0, r7
 8000da8:	f000 f80e 	bl	8000dc8 <__malloc_unlock>
 8000dac:	e797      	b.n	8000cde <_malloc_r+0x22>
 8000dae:	6025      	str	r5, [r4, #0]
 8000db0:	e7dc      	b.n	8000d6c <_malloc_r+0xb0>
 8000db2:	605b      	str	r3, [r3, #4]
 8000db4:	deff      	udf	#255	; 0xff
 8000db6:	bf00      	nop
 8000db8:	200001c0 	.word	0x200001c0

08000dbc <__malloc_lock>:
 8000dbc:	4801      	ldr	r0, [pc, #4]	; (8000dc4 <__malloc_lock+0x8>)
 8000dbe:	f7ff bf0e 	b.w	8000bde <__retarget_lock_acquire_recursive>
 8000dc2:	bf00      	nop
 8000dc4:	200001bc 	.word	0x200001bc

08000dc8 <__malloc_unlock>:
 8000dc8:	4801      	ldr	r0, [pc, #4]	; (8000dd0 <__malloc_unlock+0x8>)
 8000dca:	f7ff bf09 	b.w	8000be0 <__retarget_lock_release_recursive>
 8000dce:	bf00      	nop
 8000dd0:	200001bc 	.word	0x200001bc

08000dd4 <__sflush_r>:
 8000dd4:	898a      	ldrh	r2, [r1, #12]
 8000dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dda:	4605      	mov	r5, r0
 8000ddc:	0710      	lsls	r0, r2, #28
 8000dde:	460c      	mov	r4, r1
 8000de0:	d458      	bmi.n	8000e94 <__sflush_r+0xc0>
 8000de2:	684b      	ldr	r3, [r1, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dc05      	bgt.n	8000df4 <__sflush_r+0x20>
 8000de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dc02      	bgt.n	8000df4 <__sflush_r+0x20>
 8000dee:	2000      	movs	r0, #0
 8000df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d0f9      	beq.n	8000dee <__sflush_r+0x1a>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000e00:	682f      	ldr	r7, [r5, #0]
 8000e02:	6a21      	ldr	r1, [r4, #32]
 8000e04:	602b      	str	r3, [r5, #0]
 8000e06:	d032      	beq.n	8000e6e <__sflush_r+0x9a>
 8000e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000e0a:	89a3      	ldrh	r3, [r4, #12]
 8000e0c:	075a      	lsls	r2, r3, #29
 8000e0e:	d505      	bpl.n	8000e1c <__sflush_r+0x48>
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	1ac0      	subs	r0, r0, r3
 8000e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e16:	b10b      	cbz	r3, 8000e1c <__sflush_r+0x48>
 8000e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e1a:	1ac0      	subs	r0, r0, r3
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4602      	mov	r2, r0
 8000e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e22:	6a21      	ldr	r1, [r4, #32]
 8000e24:	4628      	mov	r0, r5
 8000e26:	47b0      	blx	r6
 8000e28:	1c43      	adds	r3, r0, #1
 8000e2a:	89a3      	ldrh	r3, [r4, #12]
 8000e2c:	d106      	bne.n	8000e3c <__sflush_r+0x68>
 8000e2e:	6829      	ldr	r1, [r5, #0]
 8000e30:	291d      	cmp	r1, #29
 8000e32:	d82b      	bhi.n	8000e8c <__sflush_r+0xb8>
 8000e34:	4a29      	ldr	r2, [pc, #164]	; (8000edc <__sflush_r+0x108>)
 8000e36:	410a      	asrs	r2, r1
 8000e38:	07d6      	lsls	r6, r2, #31
 8000e3a:	d427      	bmi.n	8000e8c <__sflush_r+0xb8>
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6062      	str	r2, [r4, #4]
 8000e40:	04d9      	lsls	r1, r3, #19
 8000e42:	6922      	ldr	r2, [r4, #16]
 8000e44:	6022      	str	r2, [r4, #0]
 8000e46:	d504      	bpl.n	8000e52 <__sflush_r+0x7e>
 8000e48:	1c42      	adds	r2, r0, #1
 8000e4a:	d101      	bne.n	8000e50 <__sflush_r+0x7c>
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	b903      	cbnz	r3, 8000e52 <__sflush_r+0x7e>
 8000e50:	6560      	str	r0, [r4, #84]	; 0x54
 8000e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e54:	602f      	str	r7, [r5, #0]
 8000e56:	2900      	cmp	r1, #0
 8000e58:	d0c9      	beq.n	8000dee <__sflush_r+0x1a>
 8000e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d002      	beq.n	8000e68 <__sflush_r+0x94>
 8000e62:	4628      	mov	r0, r5
 8000e64:	f7ff febe 	bl	8000be4 <_free_r>
 8000e68:	2000      	movs	r0, #0
 8000e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8000e6c:	e7c0      	b.n	8000df0 <__sflush_r+0x1c>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	4628      	mov	r0, r5
 8000e72:	47b0      	blx	r6
 8000e74:	1c41      	adds	r1, r0, #1
 8000e76:	d1c8      	bne.n	8000e0a <__sflush_r+0x36>
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0c5      	beq.n	8000e0a <__sflush_r+0x36>
 8000e7e:	2b1d      	cmp	r3, #29
 8000e80:	d001      	beq.n	8000e86 <__sflush_r+0xb2>
 8000e82:	2b16      	cmp	r3, #22
 8000e84:	d101      	bne.n	8000e8a <__sflush_r+0xb6>
 8000e86:	602f      	str	r7, [r5, #0]
 8000e88:	e7b1      	b.n	8000dee <__sflush_r+0x1a>
 8000e8a:	89a3      	ldrh	r3, [r4, #12]
 8000e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e90:	81a3      	strh	r3, [r4, #12]
 8000e92:	e7ad      	b.n	8000df0 <__sflush_r+0x1c>
 8000e94:	690f      	ldr	r7, [r1, #16]
 8000e96:	2f00      	cmp	r7, #0
 8000e98:	d0a9      	beq.n	8000dee <__sflush_r+0x1a>
 8000e9a:	0793      	lsls	r3, r2, #30
 8000e9c:	680e      	ldr	r6, [r1, #0]
 8000e9e:	bf08      	it	eq
 8000ea0:	694b      	ldreq	r3, [r1, #20]
 8000ea2:	600f      	str	r7, [r1, #0]
 8000ea4:	bf18      	it	ne
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	eba6 0807 	sub.w	r8, r6, r7
 8000eac:	608b      	str	r3, [r1, #8]
 8000eae:	f1b8 0f00 	cmp.w	r8, #0
 8000eb2:	dd9c      	ble.n	8000dee <__sflush_r+0x1a>
 8000eb4:	6a21      	ldr	r1, [r4, #32]
 8000eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000eb8:	4643      	mov	r3, r8
 8000eba:	463a      	mov	r2, r7
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	47b0      	blx	r6
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	dc06      	bgt.n	8000ed2 <__sflush_r+0xfe>
 8000ec4:	89a3      	ldrh	r3, [r4, #12]
 8000ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eca:	81a3      	strh	r3, [r4, #12]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	e78e      	b.n	8000df0 <__sflush_r+0x1c>
 8000ed2:	4407      	add	r7, r0
 8000ed4:	eba8 0800 	sub.w	r8, r8, r0
 8000ed8:	e7e9      	b.n	8000eae <__sflush_r+0xda>
 8000eda:	bf00      	nop
 8000edc:	dfbffffe 	.word	0xdfbffffe

08000ee0 <_fflush_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	690b      	ldr	r3, [r1, #16]
 8000ee4:	4605      	mov	r5, r0
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	b913      	cbnz	r3, 8000ef0 <_fflush_r+0x10>
 8000eea:	2500      	movs	r5, #0
 8000eec:	4628      	mov	r0, r5
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
 8000ef0:	b118      	cbz	r0, 8000efa <_fflush_r+0x1a>
 8000ef2:	6a03      	ldr	r3, [r0, #32]
 8000ef4:	b90b      	cbnz	r3, 8000efa <_fflush_r+0x1a>
 8000ef6:	f7ff fc8f 	bl	8000818 <__sinit>
 8000efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f3      	beq.n	8000eea <_fflush_r+0xa>
 8000f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000f04:	07d0      	lsls	r0, r2, #31
 8000f06:	d404      	bmi.n	8000f12 <_fflush_r+0x32>
 8000f08:	0599      	lsls	r1, r3, #22
 8000f0a:	d402      	bmi.n	8000f12 <_fflush_r+0x32>
 8000f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f0e:	f7ff fe66 	bl	8000bde <__retarget_lock_acquire_recursive>
 8000f12:	4628      	mov	r0, r5
 8000f14:	4621      	mov	r1, r4
 8000f16:	f7ff ff5d 	bl	8000dd4 <__sflush_r>
 8000f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000f1c:	07da      	lsls	r2, r3, #31
 8000f1e:	4605      	mov	r5, r0
 8000f20:	d4e4      	bmi.n	8000eec <_fflush_r+0xc>
 8000f22:	89a3      	ldrh	r3, [r4, #12]
 8000f24:	059b      	lsls	r3, r3, #22
 8000f26:	d4e1      	bmi.n	8000eec <_fflush_r+0xc>
 8000f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f2a:	f7ff fe59 	bl	8000be0 <__retarget_lock_release_recursive>
 8000f2e:	e7dd      	b.n	8000eec <_fflush_r+0xc>

08000f30 <__swhatbuf_r>:
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	460c      	mov	r4, r1
 8000f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	b096      	sub	sp, #88	; 0x58
 8000f3c:	4615      	mov	r5, r2
 8000f3e:	461e      	mov	r6, r3
 8000f40:	da0d      	bge.n	8000f5e <__swhatbuf_r+0x2e>
 8000f42:	89a3      	ldrh	r3, [r4, #12]
 8000f44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f48:	f04f 0100 	mov.w	r1, #0
 8000f4c:	bf0c      	ite	eq
 8000f4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000f52:	2340      	movne	r3, #64	; 0x40
 8000f54:	2000      	movs	r0, #0
 8000f56:	6031      	str	r1, [r6, #0]
 8000f58:	602b      	str	r3, [r5, #0]
 8000f5a:	b016      	add	sp, #88	; 0x58
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}
 8000f5e:	466a      	mov	r2, sp
 8000f60:	f000 f848 	bl	8000ff4 <_fstat_r>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	dbec      	blt.n	8000f42 <__swhatbuf_r+0x12>
 8000f68:	9901      	ldr	r1, [sp, #4]
 8000f6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000f6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000f72:	4259      	negs	r1, r3
 8000f74:	4159      	adcs	r1, r3
 8000f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7a:	e7eb      	b.n	8000f54 <__swhatbuf_r+0x24>

08000f7c <__smakebuf_r>:
 8000f7c:	898b      	ldrh	r3, [r1, #12]
 8000f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f80:	079d      	lsls	r5, r3, #30
 8000f82:	4606      	mov	r6, r0
 8000f84:	460c      	mov	r4, r1
 8000f86:	d507      	bpl.n	8000f98 <__smakebuf_r+0x1c>
 8000f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	6123      	str	r3, [r4, #16]
 8000f90:	2301      	movs	r3, #1
 8000f92:	6163      	str	r3, [r4, #20]
 8000f94:	b002      	add	sp, #8
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
 8000f98:	ab01      	add	r3, sp, #4
 8000f9a:	466a      	mov	r2, sp
 8000f9c:	f7ff ffc8 	bl	8000f30 <__swhatbuf_r>
 8000fa0:	9900      	ldr	r1, [sp, #0]
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f7ff fe89 	bl	8000cbc <_malloc_r>
 8000faa:	b948      	cbnz	r0, 8000fc0 <__smakebuf_r+0x44>
 8000fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fb0:	059a      	lsls	r2, r3, #22
 8000fb2:	d4ef      	bmi.n	8000f94 <__smakebuf_r+0x18>
 8000fb4:	f023 0303 	bic.w	r3, r3, #3
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	81a3      	strh	r3, [r4, #12]
 8000fbe:	e7e3      	b.n	8000f88 <__smakebuf_r+0xc>
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	6020      	str	r0, [r4, #0]
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	81a3      	strh	r3, [r4, #12]
 8000fca:	9b00      	ldr	r3, [sp, #0]
 8000fcc:	6163      	str	r3, [r4, #20]
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	6120      	str	r0, [r4, #16]
 8000fd2:	b15b      	cbz	r3, 8000fec <__smakebuf_r+0x70>
 8000fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f000 f81d 	bl	8001018 <_isatty_r>
 8000fde:	b128      	cbz	r0, 8000fec <__smakebuf_r+0x70>
 8000fe0:	89a3      	ldrh	r3, [r4, #12]
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	81a3      	strh	r3, [r4, #12]
 8000fec:	89a3      	ldrh	r3, [r4, #12]
 8000fee:	431d      	orrs	r5, r3
 8000ff0:	81a5      	strh	r5, [r4, #12]
 8000ff2:	e7cf      	b.n	8000f94 <__smakebuf_r+0x18>

08000ff4 <_fstat_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4d07      	ldr	r5, [pc, #28]	; (8001014 <_fstat_r+0x20>)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	602b      	str	r3, [r5, #0]
 8001002:	f7ff faf4 	bl	80005ee <_fstat>
 8001006:	1c43      	adds	r3, r0, #1
 8001008:	d102      	bne.n	8001010 <_fstat_r+0x1c>
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	b103      	cbz	r3, 8001010 <_fstat_r+0x1c>
 800100e:	6023      	str	r3, [r4, #0]
 8001010:	bd38      	pop	{r3, r4, r5, pc}
 8001012:	bf00      	nop
 8001014:	200001b8 	.word	0x200001b8

08001018 <_isatty_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d06      	ldr	r5, [pc, #24]	; (8001034 <_isatty_r+0x1c>)
 800101c:	2300      	movs	r3, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	f7ff faf3 	bl	800060e <_isatty>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_isatty_r+0x1a>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_isatty_r+0x1a>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	200001b8 	.word	0x200001b8

08001038 <_sbrk_r>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4d06      	ldr	r5, [pc, #24]	; (8001054 <_sbrk_r+0x1c>)
 800103c:	2300      	movs	r3, #0
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	602b      	str	r3, [r5, #0]
 8001044:	f7ff fafc 	bl	8000640 <_sbrk>
 8001048:	1c43      	adds	r3, r0, #1
 800104a:	d102      	bne.n	8001052 <_sbrk_r+0x1a>
 800104c:	682b      	ldr	r3, [r5, #0]
 800104e:	b103      	cbz	r3, 8001052 <_sbrk_r+0x1a>
 8001050:	6023      	str	r3, [r4, #0]
 8001052:	bd38      	pop	{r3, r4, r5, pc}
 8001054:	200001b8 	.word	0x200001b8

08001058 <_init>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr

08001064 <_fini>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr
