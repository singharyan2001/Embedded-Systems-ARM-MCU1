
BM02_UART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000360  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080004f8  080004f8  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800050c  0800050c  00001514  2**0
                  CONTENTS
  4 .ARM          00000000  0800050c  0800050c  00001514  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800050c  08000514  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000514  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000514  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000084a  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000339  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  000020c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000070  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd90  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d88  00000000  00000000  0000ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ff55  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a8  00000000  00000000  00060c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00060e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004e0 	.word	0x080004e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080004e0 	.word	0x080004e0

080001d8 <usart2_init>:
void usart2_init(void);
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphCLK, uint32_t BaudRate);
static uint16_t Compute_UART_div_bd(uint32_t PeriphCLK, uint32_t BaudRate);

void usart2_init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	/***********Configure UART Tx GPIO Pin***********/	//PA2 -> UART_Tx pin
	/*Enable Clock access to UART Tx GPIO Pin*/
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b32      	ldr	r3, [pc, #200]	@ (80002a8 <usart2_init+0xd0>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a31      	ldr	r2, [pc, #196]	@ (80002a8 <usart2_init+0xd0>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the UART GPIO Pin to Alternate function mode*/
	//PA2 -Tx //5,4 - 10 ;
	GPIOA->MODER &= ~(1U<<4);
 80001e8:	4b30      	ldr	r3, [pc, #192]	@ (80002ac <usart2_init+0xd4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a2f      	ldr	r2, [pc, #188]	@ (80002ac <usart2_init+0xd4>)
 80001ee:	f023 0310 	bic.w	r3, r3, #16
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80001f4:	4b2d      	ldr	r3, [pc, #180]	@ (80002ac <usart2_init+0xd4>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a2c      	ldr	r2, [pc, #176]	@ (80002ac <usart2_init+0xd4>)
 80001fa:	f043 0320 	orr.w	r3, r3, #32
 80001fe:	6013      	str	r3, [r2, #0]

	//PA3 Rx - (7,6) - (10)
	GPIOA->MODER &= ~(1U<<6);
 8000200:	4b2a      	ldr	r3, [pc, #168]	@ (80002ac <usart2_init+0xd4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a29      	ldr	r2, [pc, #164]	@ (80002ac <usart2_init+0xd4>)
 8000206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800020a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 800020c:	4b27      	ldr	r3, [pc, #156]	@ (80002ac <usart2_init+0xd4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a26      	ldr	r2, [pc, #152]	@ (80002ac <usart2_init+0xd4>)
 8000212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000216:	6013      	str	r3, [r2, #0]

	/*Set the UART GPIO Pin to alternate function type to UART_Tx (AF07)*/
	/*PA2*/ //AFRL [PA2] -> 11,10,9,8 -- 0111 //AFR[0] - L ; [1] - h
	GPIOA->AFR[0] &= ~(1U<<11);
 8000218:	4b24      	ldr	r3, [pc, #144]	@ (80002ac <usart2_init+0xd4>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a23      	ldr	r2, [pc, #140]	@ (80002ac <usart2_init+0xd4>)
 800021e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000224:	4b21      	ldr	r3, [pc, #132]	@ (80002ac <usart2_init+0xd4>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a20      	ldr	r2, [pc, #128]	@ (80002ac <usart2_init+0xd4>)
 800022a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000230:	4b1e      	ldr	r3, [pc, #120]	@ (80002ac <usart2_init+0xd4>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a1d      	ldr	r2, [pc, #116]	@ (80002ac <usart2_init+0xd4>)
 8000236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800023a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<8);
 800023c:	4b1b      	ldr	r3, [pc, #108]	@ (80002ac <usart2_init+0xd4>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a1a      	ldr	r2, [pc, #104]	@ (80002ac <usart2_init+0xd4>)
 8000242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000246:	6213      	str	r3, [r2, #32]

	/*PA3*/ //15,14,13,12 - 0111
	GPIOA->AFR[0] &= ~(1U<<15);
 8000248:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <usart2_init+0xd4>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a17      	ldr	r2, [pc, #92]	@ (80002ac <usart2_init+0xd4>)
 800024e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <usart2_init+0xd4>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a14      	ldr	r2, [pc, #80]	@ (80002ac <usart2_init+0xd4>)
 800025a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800025e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <usart2_init+0xd4>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a11      	ldr	r2, [pc, #68]	@ (80002ac <usart2_init+0xd4>)
 8000266:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800026a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<12);
 800026c:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <usart2_init+0xd4>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <usart2_init+0xd4>)
 8000272:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000276:	6213      	str	r3, [r2, #32]

	/***********Configure the USART Module***********/
	/*Enable Clock access to UART 2*/ //APB1
	RCC->APB1ENR |= USART2EN;
 8000278:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <usart2_init+0xd0>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027c:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <usart2_init+0xd0>)
 800027e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000282:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure Baud rate*/
	uart_set_baudrate(USART2, APB1CLK, UART_BAUDRATE);
 8000284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000288:	4909      	ldr	r1, [pc, #36]	@ (80002b0 <usart2_init+0xd8>)
 800028a:	480a      	ldr	r0, [pc, #40]	@ (80002b4 <usart2_init+0xdc>)
 800028c:	f000 f85c 	bl	8000348 <uart_set_baudrate>

	/*Configure the transfer direction*/

	//1. Enable the TX and RX pin
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <usart2_init+0xdc>)
 8000292:	220c      	movs	r2, #12
 8000294:	60da      	str	r2, [r3, #12]
 * by not using OR(|), we set all bits 0 except bit 3. hence we get the default settings.
 * Therefore 1 start bit, 8 data bits and 2 stop bits. hardware flow control etc are all disabled.
*/

	/*Enable the USART Module*/
	USART2->CR1 |= CR1_UE;	//We used OR Operator (|) To make sure not to set all the other bits to 0.
 8000296:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <usart2_init+0xdc>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a06      	ldr	r2, [pc, #24]	@ (80002b4 <usart2_init+0xdc>)
 800029c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002a0:	60d3      	str	r3, [r2, #12]
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000
 80002b0:	00f42400 	.word	0x00f42400
 80002b4:	40004400 	.word	0x40004400

080002b8 <uart2_write>:

void uart2_write(int ch){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){};
 80002c0:	bf00      	nop
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <uart2_write+0x2c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <uart2_write+0xa>

	/*Write the Data transmit register //Data register*/
	USART2->DR = (ch & 0xff);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <uart2_write+0x2c>)
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	6053      	str	r3, [r2, #4]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40004400 	.word	0x40004400

080002e8 <uart_Wstring>:

void uart_Wstring(char *message){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	for(int i = 0; message[i] != '\0'; i++){
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	e009      	b.n	800030a <uart_Wstring+0x22>
		uart2_write(message[i]);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffda 	bl	80002b8 <uart2_write>
	for(int i = 0; message[i] != '\0'; i++){
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3301      	adds	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	4413      	add	r3, r2
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1ef      	bne.n	80002f6 <uart_Wstring+0xe>
	}
}
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <uart2_read>:

char uart2_read(void){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	//Make sure the receive data register is not empty
	while(!(USART2->SR & SR_RXNE)){};
 8000324:	bf00      	nop
 8000326:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <uart2_read+0x24>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f003 0320 	and.w	r3, r3, #32
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <uart2_read+0x6>

	//Return data
	return USART2->DR;
 8000332:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <uart2_read+0x24>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	b2db      	uxtb	r3, r3
}
 8000338:	4618      	mov	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40004400 	.word	0x40004400

08000348 <uart_set_baudrate>:
	} while(received_char != '\n' && i < MAX_STRING_LENGTH - 1);

	buffer[i] = '\0';
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphCLK, uint32_t BaudRate){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	USARTx->BRR = Compute_UART_div_bd(PeriphCLK, BaudRate);
 8000354:	6879      	ldr	r1, [r7, #4]
 8000356:	68b8      	ldr	r0, [r7, #8]
 8000358:	f000 f808 	bl	800036c <Compute_UART_div_bd>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	609a      	str	r2, [r3, #8]
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <Compute_UART_div_bd>:

static uint16_t Compute_UART_div_bd(uint32_t PeriphCLK, uint32_t BaudRate){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	return ((PeriphCLK + (BaudRate/2U))/BaudRate);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	085a      	lsrs	r2, r3, #1
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	441a      	add	r2, r3
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	fbb2 f3f3 	udiv	r3, r2, r3
 8000384:	b29b      	uxth	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <main>:
void GPIOA5_Toggle(void);

char key;

int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	GPIOA5_init();
 8000398:	f000 f818 	bl	80003cc <GPIOA5_init>

	usart2_init();
 800039c:	f7ff ff1c 	bl	80001d8 <usart2_init>

    while(1){
    	//Send message
    	//uart2_write('Y'); //uart_Wstring("[Hello, World!]\n\r");
    	key = uart2_read();
 80003a0:	f7ff ffbe 	bl	8000320 <uart2_read>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <main+0x30>)
 80003aa:	701a      	strb	r2, [r3, #0]

    	if(key == '1'){
 80003ac:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <main+0x30>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b31      	cmp	r3, #49	@ 0x31
 80003b2:	d102      	bne.n	80003ba <main+0x26>
    		GPIOA5_Toggle();
 80003b4:	f000 f828 	bl	8000408 <GPIOA5_Toggle>
 80003b8:	e7f2      	b.n	80003a0 <main+0xc>
    	}
    	else{
    		uart_Wstring("[Hello, World!]\n\r");
 80003ba:	4803      	ldr	r0, [pc, #12]	@ (80003c8 <main+0x34>)
 80003bc:	f7ff ff94 	bl	80002e8 <uart_Wstring>
    	key = uart2_read();
 80003c0:	e7ee      	b.n	80003a0 <main+0xc>
 80003c2:	bf00      	nop
 80003c4:	2000001c 	.word	0x2000001c
 80003c8:	080004f8 	.word	0x080004f8

080003cc <GPIOA5_init>:
    	}

    }
}

void GPIOA5_init(void){
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80003d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <GPIOA5_init+0x34>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000400 <GPIOA5_init+0x34>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1U<<10);
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <GPIOA5_init+0x38>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a08      	ldr	r2, [pc, #32]	@ (8000404 <GPIOA5_init+0x38>)
 80003e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <GPIOA5_init+0x38>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a05      	ldr	r2, [pc, #20]	@ (8000404 <GPIOA5_init+0x38>)
 80003ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800
 8000404:	40020000 	.word	0x40020000

08000408 <GPIOA5_Toggle>:

void GPIOA5_Toggle(void){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED_PIN;
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <GPIOA5_Toggle+0x34>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <GPIOA5_Toggle+0x34>)
 8000414:	f083 0320 	eor.w	r3, r3, #32
 8000418:	6153      	str	r3, [r2, #20]
	for(int i = 0; i < 1000000; i++){}
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	e002      	b.n	8000426 <GPIOA5_Toggle+0x1e>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3301      	adds	r3, #1
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <GPIOA5_Toggle+0x38>)
 800042a:	4293      	cmp	r3, r2
 800042c:	ddf8      	ble.n	8000420 <GPIOA5_Toggle+0x18>
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40020000 	.word	0x40020000
 8000440:	000f423f 	.word	0x000f423f

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	@ (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	@ (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	@ (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	@ (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 f811 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff ff8d 	bl	8000394 <main>

0800047a <LoopForever>:

LoopForever:
  b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000488:	08000514 	.word	0x08000514
  ldr r2, =_sbss
 800048c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000490:	20000020 	.word	0x20000020

08000494 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC_IRQHandler>
	...

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4d0d      	ldr	r5, [pc, #52]	@ (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	@ (80004d4 <__libc_init_array+0x3c>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2600      	movs	r6, #0
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4d0b      	ldr	r5, [pc, #44]	@ (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	@ (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 f818 	bl	80004e0 <_init>
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2600      	movs	r6, #0
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	0800050c 	.word	0x0800050c
 80004d4:	0800050c 	.word	0x0800050c
 80004d8:	0800050c 	.word	0x0800050c
 80004dc:	08000510 	.word	0x08000510

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr
